-- Class of Match manager reference:http://www.jfa.or.jp/jfa/terminology/
class MatchManager is subclass of Environment, MyPrintTestListener


instance variables

-- matchmakes
matchmakes : map Match to MatchMake := {|->};
inv 
  (forall match in set dom matchmakes & match = matchmakes(match).getMatch())
    and
--  (forall m in set rng matchmakes & valid(m))
--    and
  (forall mm1, mm2 in set rng matchmakes & 
    mm1 <> mm2 => consistent(mm1, mm2));

-- teams
teams : map TeamID to Team := {|->};
inv 
  (forall id in set dom teams & id = teams(id).getID())
    and
  (forall t in set rng teams & validTeam(t))
    and
  (forall t1, t2 in set rng teams & 
    t1 <> t2 => consistentTeam(t1, t2));


functions

-- dupulication check
public consistent : MatchMake * MatchMake -> bool
consistent(mm1, mm2) ==
--   mm1.getID() <> mm2.getID() or 
   not equals(mm1.getMatch(), mm2.getMatch());

-- dupulication check
public consistentTeam : Team * Team -> bool
consistentTeam(t1, t2) ==
   t1.getID() <> t2.getID();


operations

-- validation check
--public pure valid : MatchMake ==> bool
--valid(mm) ==
--  return
--    mm.getID() in set getAllMatchIDs();

-- validation check
public pure validTeam : Team ==> bool
validTeam(t) ==
  return
    t.getID() in set getAllTeamIDs();
    
-- add MatchMake
public addMatchMake : MatchMake ==> ()
addMatchMake(matchmake) ==
  atomic(
    matchmakes := matchmakes munion {matchmake.getMatch() |-> matchmake};
  )
pre 
--  matchmake.getID() not in set dom matchmakes
--    and
--  valid(matchmake)
--    and
  forall n in set rng matchmakes & consistent(matchmake, n)
post matchmake in set rng matchmakes;


-- add Team
public addTeam : Team ==> ()
addTeam(team) ==
  atomic(
    teams := teams munion {team.getID() |-> team};
  )
pre 
  team.getID() not in set dom teams
    and
  validTeam(team)
    and
  forall n in set rng teams & consistentTeam(team, n)
post team in set rng teams;

-- get MatchMake from specific Match
public pure getMatchMake : Match ==> MatchMake
getMatchMake(match) ==
  return matchmakes(match)
pre match in set dom matchmakes;

-- get All MatchMakes 
public pure getAllMatchMakes : () ==> map Match to MatchMake
getAllMatchMakes() ==
  return matchmakes;

-- get Team from specific ID
public pure getTeam : TeamID ==> Team
getTeam(teamID) ==
  return teams(teamID)
pre teamID in set dom teams;

-- calculate group scores
public calc : () ==> ()
calc() == (
	for all matchmake in set rng matchmakes do (
		if matchmake.isDone() then (
			dcl match : Match := matchmake.getMatch();
			dcl team1 : Team := getTeam(match.#1);
			dcl team2 : Team := getTeam(match.#2);
			
			team1.setPoint(matchmake.getPoint(team1.getID()));
			team1.setGoalFor(matchmake.getScore(team1.getID()));
			team1.setAgainst(matchmake.getScore(team2.getID()));
			
			team2.setPoint(matchmake.getPoint(team2.getID()));
			team2.setGoalFor(matchmake.getScore(team2.getID()));
			team2.setAgainst(matchmake.getScore(team1.getID()));
		);
	);
);


-- initialize group
public initGroup : int ==> ()
initGroup(num) == (
	-- dcl count : int := MATH`fac(num) / (2 * MATH`fac(num-2)); -- the number of matches within the group

	for all i in set {1,...,num} do (
		addTeamID(i);
		addTeam(new Team(i));
	);
	
	for all match in set getAllMatches() do (
		addMatchMake(new MatchMake(match));
	);
)
pre num >= 3;

public printAll : () ==> ()
printAll() == (
  for all team in set rng teams do (
		print(team.getID());
		print(", ");
	);
	println("");
	
	for all matchmake in set rng matchmakes do (
		print(matchmake.getMatch());
		print(", ");
	);
	println("");
	
	for all team in set rng teams do (
		print(team.getPoint());
		print(", ");
	);
	println("");
);

end MatchManager
